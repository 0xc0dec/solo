use("../data/shaders.ch");

GLOBAL device := engine.getDevice();
GLOBAL scene := engine.getScene();
GLOBAL resManager := engine.getResourceManager();


class EscapeWatcher
{
	def EscapeWatcher(node)
	{
	}

	def update()
	{
		if (device.isKeyPressed(KeyCode_Escape, true))
		{
			device.requestShutdown();
		}
	}
}


class Spectator
{
	var transform;

	def Spectator(node)
	{
		this.node := node;
	}

	def update()
	{
		var mouseMotion = device.getMouseMotion();
		var dt = device.getTimeDelta();

		if (device.isMouseButtonDown(MouseButton_Right, true))
		{
			device.setCursorCaptured(true);
		}
		if (device.isMouseButtonReleased(MouseButton_Right))
		{
			device.setCursorCaptured(false);
		}

		if (device.isMouseButtonDown(MouseButton_Right, false))
		{
			if (mouseMotion.x != 0)
			{
				transform.rotate(unitVector3Y(), 0.5f * dt * -mouseMotion.x, TransformSpace_World);
			}
			if (mouseMotion.y != 0)
			{
				transform.rotate(unitVector3X(), 0.5f * dt * -mouseMotion.y, TransformSpace_Self);
			}
		}

		var movement = Vector3();
		if (device.isKeyPressed(KeyCode_W, false))
		{
			movement += transform.getLocalForward();
		}
		if (device.isKeyPressed(KeyCode_S, false))
		{
			movement += transform.getLocalBack();
		}
		if (device.isKeyPressed(KeyCode_A, false))
		{
			movement += transform.getLocalLeft();
		}
		if (device.isKeyPressed(KeyCode_D, false))
		{
			movement += transform.getLocalRight();
		}
		if (device.isKeyPressed(KeyCode_Q, false))
		{
			movement += transform.getLocalDown();
		}
		if (device.isKeyPressed(KeyCode_E, false))
		{
			movement += transform.getLocalUp();
		}

		movement.normalize();
		movement *= dt * 10;
		transform.translateLocal(movement);
	}
}

def loadTexture(path)
{
	var result := resManager.getOrLoadTexture(path);
	result.generateMipmaps();
	result.setFilterMode(Filter_Linear, Filter_Linear);
	result.setAnisotropyLevel(8);
	return result;
}


var tex1 := loadTexture("../data/freeman1.png");
var tex2 := loadTexture("../data/freeman2.png");

var texEffect := resManager.getOrCreateEffect(vsBasic, fsTexture);
var texMaterial := resManager.createMaterial(texEffect);
texMaterial.setPolygonFace(PolygonFace_All);
texMaterial.getParameter("worldViewProjMatrix").bindValue(AutoBinding_WorldViewProjectionMatrix);
texMaterial.getParameter("mainTex").setValue(tex1);

var checkerEffect := resManager.getOrCreateEffect(vsBasic, fsChecker);
var checkerMaterial := resManager.createMaterial(checkerEffect);
checkerMaterial.setPolygonFace(PolygonFace_All);
checkerMaterial.getParameter("color").setValue(Vector4(1, 1, 0, 1));
checkerMaterial.getParameter("worldViewProjMatrix").bindValue(AutoBinding_WorldViewProjectionMatrix);

var textureWithLightingEffect := resManager.getOrCreateEffect(vsBasicLighting, fsTextureWithLighting);
var texWithLightingMaterial := resManager.createMaterial(textureWithLightingEffect);
texWithLightingMaterial.setPolygonFace(PolygonFace_All);
texWithLightingMaterial.getParameter("worldViewProjMatrix").bindValue(AutoBinding_WorldViewProjectionMatrix);
texWithLightingMaterial.getParameter("normalMatrix").bindValue(AutoBinding_InverseTransposedWorldMatrix);
texWithLightingMaterial.getParameter("mainTex").setValue(tex2);


var renderTarget := resManager.getOrCreateRenderTarget("test");
var renderTexture := resManager.getOrCreateTexture("RTT");
renderTexture.setData(ColorFormat_RGB, ByteVector(), 160, 120);
renderTexture.setFilterMode(Filter_Nearest, Filter_Nearest);
renderTexture.setWrapMode(WrapMode_Clamp, WrapMode_Clamp);
var texVector = Texture2DVector();
texVector.push_back(renderTexture);
renderTarget.setTextures(texVector);

var offscreenCameraNode := scene.createNode();
var offscreenCameraTransform := offscreenCameraNode.findComponent("Transform");
offscreenCameraTransform.setLocalPosition(Vector3(0, 0, 10));
var offscreenCamera := offscreenCameraNode.addComponent("Camera");
offscreenCamera.setClearColor(1, 1, 1, 1);
offscreenCamera.setNear(0.05f);
offscreenCamera.setRenderTarget(renderTarget);
offscreenCamera.setViewport(0, 0, 160, 120);

var renderTargetMaterial := resManager.createMaterial(texEffect);
renderTargetMaterial.setPolygonFace(PolygonFace_All);
renderTargetMaterial.getParameter("worldViewProjMatrix").bindValue(AutoBinding_WorldViewProjectionMatrix);
renderTargetMaterial.getParameter("mainTex").setValue(renderTexture);

var mainCameraNode := scene.createNode();
var mainCameraTransform := mainCameraNode.findComponent("Transform");
mainCameraTransform.setLocalPosition(0, 0, 10);
mainCameraNode.addComponent("Spectator");
mainCameraNode.addComponent("EscapeWatcher");
var mainCamera := mainCameraNode.addComponent("Camera");
mainCamera.setClearColor(0, 0.6f, 0.6f, 1);
mainCamera.setNear(0.05f);