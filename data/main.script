GLOBAL device := engine.getDevice();
GLOBAL scene := engine.getScene();
GLOBAL resManager := engine.getResourceManager();


class EscapeWatcher
{
	def EscapeWatcher(node)
	{
	}

	def update()
	{
		if (device.isKeyPressed(KeyCode_Escape, true))
		{
			device.requestShutdown();
		}
	}
}


class Spectator
{
	var transform;

	def Spectator(node)
	{
		this.node := node;
	}

	def update()
	{
		var mouseMotion = device.getMouseMotion();
		var dt = device.getTimeDelta();

		if (device.isMouseButtonDown(MouseButton_Right, true))
		{
			device.setCursorCaptured(true);
		}
		if (device.isMouseButtonReleased(MouseButton_Right))
		{
			device.setCursorCaptured(false);
		}

		if (device.isMouseButtonDown(MouseButton_Right, false))
		{
			if (mouseMotion.x != 0)
			{
				transform.rotate(unitVector3Y(), 0.5f * dt * -mouseMotion.x, TransformSpace_World);
			}
			if (mouseMotion.y != 0)
			{
				transform.rotate(unitVector3X(), 0.5f * dt * -mouseMotion.y, TransformSpace_Self);
			}
		}

		var movement = Vector3();
		if (device.isKeyPressed(KeyCode_W, false))
		{
			movement += transform.getLocalForward();
		}
		if (device.isKeyPressed(KeyCode_S, false))
		{
			movement += transform.getLocalBack();
		}
		if (device.isKeyPressed(KeyCode_A, false))
		{
			movement += transform.getLocalLeft();
		}
		if (device.isKeyPressed(KeyCode_D, false))
		{
			movement += transform.getLocalRight();
		}
		if (device.isKeyPressed(KeyCode_Q, false))
		{
			movement += transform.getLocalDown();
		}
		if (device.isKeyPressed(KeyCode_E, false))
		{
			movement += transform.getLocalUp();
		}

		movement.normalize();
		movement *= dt * 10;
		transform.translateLocal(movement);
	}
}


var node := scene.createNode();
node.addComponent("EscapeWatcher");


def loadTexture(path)
{
	var result := resManager.getOrLoadTexture(path);
	result.generateMipmaps();
	result.setFilterMode(Filter_Linear, Filter_Linear);
	result.setAnisotropyLevel(8);
	return result;
}

var tex1 := loadTexture("../data/freeman1.png");
var tex2 := loadTexture("../data/freeman2.png");

var vsBasic = "
#version 330 core

layout (location = 0) in vec4 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 uv;

uniform mat4 worldViewProjMatrix;
out vec2 uv0;
out vec3 n;

void main()
{
	gl_Position = worldViewProjMatrix * position;
	uv0 = uv;
}";

var fsTexture = "
#version 330 core
	
uniform sampler2D mainTex;

in vec2 uv0;
out vec4 fragColor;

void main()
{
	fragColor = texture(mainTex, uv0);
}";

var texEffect := resManager.getOrCreateEffect(vsBasic, fsTexture);
var texMaterial := resManager.createMaterial(texEffect);
texMaterial.setPolygonFace(PolygonFace_All);
texMaterial.getParameter("color").setValue(Vector4(1, 1, 0, 1));
texMaterial.getParameter("worldViewProjMatrix").bindValue(AutoBinding_WorldViewProjectionMatrix);