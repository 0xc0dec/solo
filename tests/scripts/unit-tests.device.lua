runTest(function()
	assert(solo.DeviceCreationArgs())
	assert(solo.DeviceCreationArgs(solo.DeviceMode_OpenGL))
	assert(solo.DeviceCreationArgs(solo.DeviceMode_OpenGL, 1))
	assert(solo.DeviceCreationArgs(solo.DeviceMode_OpenGL, 1, 2))
	assert(solo.DeviceCreationArgs(solo.DeviceMode_OpenGL, 1, 2, true))
	assert(solo.DeviceCreationArgs(solo.DeviceMode_OpenGL, 1, 2, true, "Test title"))
	assert(solo.DeviceCreationArgs(solo.DeviceMode_OpenGL, 1, 2, true, "Test title", 3))
	assert(solo.DeviceCreationArgs(solo.DeviceMode_OpenGL, 1, 2, true, "Test title", 3, 4))

	local args = solo.DeviceCreationArgs(solo.DeviceMode_OpenGL, 1, 2, true, "Test title", 3, 4)
	assert(args.mode)
	assert(args.bits)
	assert(args.canvasWidth)
	assert(args.canvasHeight)
	assert(args.depth)
	assert(args.fullScreen)
	assert(args.windowTitle == "Test title")

	assert(device:getScene())
	assert(device:getResourceManager())
	assert(device:getFileSystem())
	assert(device:getMode() ~= nil)
	device:requestShutdown()
	assert(device:shutdownRequested() ~= nil)

	device:setStartCallback(function() end)
	device:setShutdownCallback(function() end)
	device:setShutdownRequestedCallback(function() return true end)

	device:setWindowTitle("Some title")
	assert(device:getWindowTitle() == "Some title")
	device:setCursorCaptured()
	assert(device:getCanvasSize() ~= nil)
	assert(device:getLifetime() ~= nil)
	assert(device:isKeyPressed(solo.KeyCode_A) ~= nil)
	assert(device:isKeyReleased(solo.KeyCode_A) ~= nil)
	assert(device:getMouseMotion())
	assert(device:isMouseButtonDown(solo.MouseButton_Left) ~= nil)
	assert(device:isMouseButtonReleased(solo.MouseButton_Left) ~= nil)
	assert(device:getTimeDelta() ~= nil)
end, "Device")
