#include "SoloResourceManager.h"
#include "SoloEffect.h"
#include "SoloMaterial.h"
#include "SoloMesh.h"
#include "SoloModel.h"

using namespace solo;


shared<ResourceManager> ResourceManagerFactory::create()
{
	return NEW2(ResourceManager);
}


ResourceManager::ResourceManager():
	idCounter(0)
{
}


std::string ResourceManager::getAutoGeneratedId()
{
	auto id = std::string("Generated_") + std::to_string(++idCounter);
	return id;
}


shared<Effect> ResourceManager::getEffect(const std::string& vsSrc, const std::string& fsSrc)
{
	auto id = std::to_string(getHash(vsSrc + fsSrc));
	auto existing = effects.find(id);
	if (existing != effects.end())
		return existing->second;
	auto effect = EffectFactory::create(vsSrc, fsSrc);
	effects[id] = effect;
	return effect;
}


shared<Material> ResourceManager::getMaterial()
{
	auto id = getAutoGeneratedId();
	return getMaterial(id);
}


shared<Material> ResourceManager::getMaterial(const std::string& id)
{
	auto existing = materials.find(id);
	if (existing != materials.end())
		return existing->second;
	auto material = MaterialFactory::create();
	materials[id] = material;
	return material;
}


shared<Mesh> ResourceManager::getMesh(const std::string& id)
{
	auto existing = meshes.find(id);
	if (existing != meshes.end())
		return existing->second;
	auto mesh = MeshFactory::create();
	meshes[id] = mesh;
	return mesh;
}


shared<Mesh> ResourceManager::getMesh()
{
	auto id = getAutoGeneratedId();
	return getMesh(id);
}


shared<Model> ResourceManager::getModel(const std::string& id)
{
	auto existing = models.find(id);
	if (existing != models.end())
		return existing->second;
	auto model = ModelFactory::create();
	models[id] = model;
	return model;
}


shared<Model> ResourceManager::getModel()
{
	auto id = getAutoGeneratedId();
	return getModel(id);
}